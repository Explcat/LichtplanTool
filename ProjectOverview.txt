Project Structure and Code Overview
===================================

Project Root: C:\Users\admin\Documents\development\lichtplan\LichtplanTool

File: js\events.js
-------------------------
```typescript
/*********************** Event Bindings & Mode Handling ************************/

// Global variable for music items (if not already defined)
let musicItems = [];

// DOM Elements used in events
const toggleModeButton = document.getElementById('toggleMode');
const editSzenenameBtn = document.getElementById('editSzenenameBtn');
const pictureFileInput = document.getElementById('pictureFileInput');
const addPictureBtn = document.getElementById('addPictureBtn');

/*********************** Szenenname Editing ************************/
/**
 * Enables editing the scene name.
 */
function enableSzenenameEditing() {
  const input = document.createElement('input');
  input.type = 'text';
  input.id = 'szenenameInput';
  input.value = szenenameDisplay.textContent;
  szenenameDisplay.parentNode.replaceChild(input, szenenameDisplay);
  editSzenenameBtn.textContent = 'Save';
}

/**
 * Saves the edited scene name.
 */
function saveSzenenameEdit() {
  const input = document.getElementById('szenenameInput');
  if (input) {
    db.scenes[currentSceneIndex].sceneName = input.value;
    const span = document.createElement('span');
    span.id = 'szenenameDisplay';
    span.textContent = input.value;
    input.parentNode.replaceChild(span, input);
    szenenameDisplay = span;
    document.getElementById('currentSceneNameField').value = input.value;
    document.getElementById('currentSceneNameFieldRight').value = input.value;
    editSzenenameBtn.textContent = 'Edit';
  }
}

editSzenenameBtn.addEventListener('click', function() {
  if (editSzenenameBtn.textContent === 'Edit') {
    enableSzenenameEditing();
  } else {
    saveSzenenameEdit();
    saveJsonDB();
  }
});

/*********************** Bildauswahl ************************/
// Show file input when addPictureBtn is clicked
addPictureBtn.addEventListener('click', function() {
  pictureFileInput.click();
});

// Validate and process the selected picture file.
pictureFileInput.addEventListener('change', function(event) {
  const file = event.target.files[0];
  if (!file) return;
  if (file.type !== "image/jpeg") {
    alert("Bitte nur JPEG-Bilder auswÃ¤hlen.");
    return;
  }
  if (file.size > 10 * 1024 * 1024) {
    alert("DateigrÃ¶ÃŸe darf 10 MB nicht Ã¼berschreiten.");
    return;
  }
  const localURL = "szenenbilder/" + file.name;
  db.scenes[currentSceneIndex].image = localURL;
  document.getElementById('sceneImg').src = localURL;
  saveJsonDB();
});

/*********************** Music Section Events ************************/
// When the "Add Music" button is clicked, open the hidden file input.
document.getElementById('addMusicBtn').addEventListener('click', function(){
  document.getElementById('musicFileInput').click();
});

// When a music file is selected, validate and add it to the current scene.
document.getElementById('musicFileInput').addEventListener('change', function(event){
  const file = event.target.files[0];
  if (!file) return;
 
  // Limit to 5 music items
  if (musicItems.length >= 5) {
    alert('Maximal 5 Musikdateien sind erlaubt.');
    return;
  }
  // Construct local URL: files are assumed to be in the /szenenmusik folder
  const fileUrl = 'szenenmusik/' + file.name;
  const fileName = file.name;
  musicItems.push({ fileUrl, fileName, audio: null });
  renderMusicList();
});

/*********************** Mode & Snapshot Handling ************************/
/**
 * Saves the current scene snapshot.
 * @param {boolean} silent - if true, no alert is shown.
 */
function saveSnapshot(silent) {
  const scene = db.scenes[currentSceneIndex];
  // Save notes from textarea
  scene.notes = document.getElementById('notes').value;
  scene.pultLinks.sectionA = collectValues('links-A');
  scene.pultRechts.sectionA = collectValues('rechts-A');

  // Save LED statuses from current scene (Section A)
  const ledStateA = [];
  document.querySelectorAll('#led-buttons-SectionA .led-btn').forEach(btn => {
    ledStateA.push(btn.classList.contains('on'));
  });
  scene.led = ledStateA;

  // Save LED slider value for current scene using noUiSlider API
  const ledSliderA = document.getElementById('led-slider-A');
  scene.ledSlider = parseInt(ledSliderA.noUiSlider.get());

  // Save spotlight (Verfolger) notes from textarea
  scene.verfolger = document.getElementById('verfolgerInput').value;
  
  // Save the current scene's music items.
  scene.musik = musicItems;

  saveJsonDB();
  if (!silent) {
    alert('Snapshot gespeichert!');
  }
}

toggleModeButton.addEventListener('click', function() {
  isEditMode = !isEditMode;
  toggleModeButton.textContent = isEditMode ? 'Wechsel zu Read Mode' : 'Wechsel zu Edit Mode';
  editSzenenameBtn.style.display = isEditMode ? 'inline-block' : 'none';
  // Update the new scene and delete scene buttons
  document.getElementById('newSzene').style.display = isEditMode ? 'inline-block' : 'none';
  document.getElementById('deleteSzene').style.display = isEditMode ? 'inline-block' : 'none';
  
  // Update the Add Music button display based on mode.
  document.getElementById('addMusicBtn').style.display = isEditMode ? 'inline-block' : 'none';
  
  // Update the notes textarea readOnly property
  document.getElementById('notes').readOnly = !isEditMode;
  updatePictureControls();

  // Update pointer events for LED slider in section A
  const ledSliderA = document.getElementById('led-slider-A');
  if (ledSliderA) {
    ledSliderA.style.pointerEvents = isEditMode ? 'auto' : 'none';
  }
  
  renderScene();
});

/*********************** Scene Navigation ************************/
document.getElementById('prevScene').addEventListener('click', function() {
  saveSnapshot(true);
  if (currentSceneIndex > 0) {
    currentSceneIndex--;
    renderScene();
  } else {
    alert('Bereits bei der ersten Szene.');
  }
});

document.getElementById('nextScene').addEventListener('click', function() {
  saveSnapshot(true);
  if (currentSceneIndex < db.scenes.length - 1) {
    currentSceneIndex++;
    renderScene();
  } else {
    alert('Keine nÃ¤chste Szene vorhanden.');
  }
});

/*********************** Neue Szene / LÃ¶schen ************************/
document.getElementById('newSzene').addEventListener('click', function() {
  saveSnapshot(true);
  const newScene = createEmptyScene(db.scenes[currentSceneIndex].sceneNumber + 1);
  db.scenes.splice(currentSceneIndex + 1, 0, newScene);
  renumberScenes();
  currentSceneIndex++;
  renderScene();
  saveJsonDB();
});

document.getElementById('deleteSzene').addEventListener('click', function() {
  if (db.scenes.length <= 1) {
    alert('Mindestens eine Szene muss vorhanden sein.');
    return;
  }
  if (confirm('Szene wirklich lÃ¶schen?')) {
    db.scenes.splice(currentSceneIndex, 1);
    if (currentSceneIndex >= db.scenes.length) {
      currentSceneIndex = db.scenes.length - 1;
    }
    renumberScenes();
    renderScene();
    saveJsonDB();
  }
});

/**
 * Renumbers all scenes in the database.
 */
function renumberScenes() {
  db.scenes.forEach((scene, index) => {
    scene.sceneNumber = index + 1;
  });
}

/*********************** Snapshot Buttons ************************/
document.getElementById('saveSnapshot').addEventListener('click', function() {
  saveSnapshot();
});
document.getElementById('loadSnapshot').addEventListener('click', function() {
  loadJsonDB();
  alert('Snapshot geladen!');
});

/*********************** Export / Import ************************/
function exportData() {
  const dataStr = JSON.stringify(db, null, 2);
  const blob = new Blob([dataStr], { type: "application/json" });
  const url = URL.createObjectURL(blob);
  const a = document.createElement('a');
  a.href = url;
  a.download = "db.json";
  document.body.appendChild(a);
  a.click();
  document.body.removeChild(a);
  URL.revokeObjectURL(url);
}

function importData(event) {
  const file = event.target.files[0];
  if (!file) return;
  const reader = new FileReader();
  reader.onload = function(e) {
    try {
      db = JSON.parse(e.target.result);
      currentSceneIndex = 0;
      renderScene();
      saveJsonDB();
      alert("Daten erfolgreich geladen!");
    } catch (error) {
      alert("Fehler beim Parsen der Datei!");
    }
  };
  reader.readAsText(file);
}

document.getElementById('exportBtn').addEventListener('click', exportData);
document.getElementById('importBtn').addEventListener('click', function() {
  document.getElementById('importFile').click();
});
document.getElementById('importFile').addEventListener('change', importData);

/*********************** LED Slider Event ************************/
// For current scene LED slider (Section A)
const ledSliderA = document.getElementById('led-slider-A');
if (ledSliderA && ledSliderA.noUiSlider) {
  ledSliderA.noUiSlider.on('update', function(values, handle) {
    updateLEDSliderValue(values[handle], 'led-slider-value-A');
  });
}
// For next scene LED slider (Section B) - read-only, so no update event needed

/*********************** Initial Setup ************************/
// Initialize LED buttons and vertical LED sliders
initLEDButtons('led-buttons-SectionA', true);   // Editable (current scene)
initLEDButtons('led-buttons-SectionB', false);    // Read-only (next scene)
initLEDSlider('led-slider-A', 0, true);             // Editable
initLEDSlider('led-slider-B', 0, false);            // Read-only
loadJsonDB();
updatePictureControls();

document.addEventListener('keydown', function(event) {
  // Only process keyboard events in read mode
  if (!isEditMode) {
    if (event.key === 'ArrowRight') {
      // Move to next scene
      saveSnapshot(true);
      if (currentSceneIndex < db.scenes.length - 1) {
        currentSceneIndex++;
        renderScene();
      } else {
        alert('Keine nÃ¤chste Szene vorhanden.');
      }
    } else if (event.key === 'ArrowLeft') {
      // Move to previous scene
      saveSnapshot(true);
      if (currentSceneIndex > 0) {
        currentSceneIndex--;
        renderScene();
      } else {
        alert('Bereits bei der ersten Szene.');
      }
    }
  }
});

```

File: js\globals.js
-------------------------
```typescript
/*********************** Global Variables & DB Setup ************************/
let isEditMode = false;
let db = { scenes: [] };
let currentSceneIndex = 0;

// DOM-Elemente â€“ szenenameDisplay as a global variable because we update it dynamically.
let szenenameDisplay = document.getElementById('szenenameDisplay');

/**
 * Creates a new empty scene with default values for faders, LED buttons, LED slider, and spotlight notes.
 * @param {number} sceneNumber 
 * @returns {object} new scene object
 */
function createEmptyScene(sceneNumber) {
  return {
    sceneNumber: sceneNumber,
    sceneName: 'Szene ' + sceneNumber,
    nextszenename: '',
    notes: '',
    image: '',  // Bild als DataURL
    pultLinks: { sectionA: new Array(12).fill(0) },
    pultRechts: { sectionA: new Array(12).fill(0) },
    led: new Array(24).fill(false),      // LED buttons for current scene
    ledSlider: 0,                        // LED slider value for current scene
    verfolger: '',                       // Spotlight-Notizen
    musik: []                            // NEW: Array for music items in this scene
  };
}

/**
 * Saves the current DB state to localStorage.
 */
function saveJsonDB() {
  localStorage.setItem('jsonDB', JSON.stringify(db));
}

/**
 * Loads the DB state from localStorage or from an external JSON file.
 */
function loadJsonDB() {
  const localData = localStorage.getItem('jsonDB');
  if (localData) {
    db = JSON.parse(localData);
    console.log('DB aus localStorage geladen');
    renderScene();
  } else {
    fetch('Projektdaten/db.json')
      .then(response => response.json())
      .then(data => {
        db = data;
        if (db.scenes.length === 0) {
          db.scenes.push(createEmptyScene(1));
        }
        renderScene();
      })
      .catch(err => {
        console.error('Fehler beim Laden der db.json, Standard-DB wird erstellt.', err);
        db = { scenes: [createEmptyScene(1)] };
        renderScene();
      });
  }
}

```

File: js\helpers.js
-------------------------
```typescript
/*********************** Helper Functions ************************/

/**
 * Creates a noUiSlider on the given element.
 * Used for channel sliders.
 * @param {HTMLElement} element 
 * @param {number} startValue 
 * @param {boolean} readOnly 
 */
function createSlider(element, startValue, readOnly = false) {
  noUiSlider.create(element, {
    start: startValue,
    step: 1,
    range: { 'min': 0, 'max': 10 },
    orientation: 'vertical',
    direction: 'rtl', // Niedrigste Werte unten
    tooltips: true,
    animate: false
  });
  element.style.pointerEvents = readOnly ? 'none' : (isEditMode ? 'auto' : 'none');
}

/**
 * Creates 12 vertical sliders in a container based on an array of values.
 * @param {string} containerId 
 * @param {Array} values 
 * @param {boolean} readOnly 
 */
function createChannelSliders(containerId, values, readOnly = false) {
  const container = document.getElementById(containerId);
  container.innerHTML = '';
  for (let i = 0; i < 12; i++) {
    const chanDiv = document.createElement('div');
    chanDiv.classList.add('channel');

    // Label above the slider
    const label = document.createElement('div');
    label.classList.add('slider-label');
    label.textContent = i + 1;
    chanDiv.appendChild(label);

    // Slider container
    const sliderDiv = document.createElement('div');
    sliderDiv.classList.add('slider');
    sliderDiv.id = containerId + '-channel-' + (i + 1);
    chanDiv.appendChild(sliderDiv);
    container.appendChild(chanDiv);

    let initial = (values && values[i] !== undefined) ? values[i] : 0;
    createSlider(sliderDiv, initial, readOnly);
  }
}

/**
 * Initializes the LED button grid (4 rows x 6 columns) in a given container.
 * Each button is labeled with its number (1-24) and toggles its state on click.
 * @param {string} containerId - The ID of the container element.
 * @param {boolean} editable - If true, buttons are clickable (only toggled in edit mode).
 */
function initLEDButtons(containerId, editable = true) {
  const container = document.getElementById(containerId);
  container.innerHTML = '';
  for (let i = 0; i < 24; i++) {
    const btn = document.createElement('button');
    btn.classList.add('led-btn');
    btn.dataset.index = i;
    btn.textContent = i + 1; // Display button number (1 to 24)
    if (editable) {
      btn.addEventListener('click', function() {
        if (!isEditMode) return;  // Only allow toggling in edit mode
        btn.classList.toggle('on');
        btn.style.backgroundColor = btn.classList.contains('on') ? 'green' : 'white';
      });
    }
    container.appendChild(btn);
    // Insert a line break after every 6 buttons
    if ((i + 1) % 6 === 0) {
      container.appendChild(document.createElement('br'));
    }
  }
}

/**
 * Initializes a vertical noUiSlider for the LED slider in a given container.
 * @param {string} containerId - The ID of the slider element.
 * @param {number} startValue - The initial slider value.
 * @param {boolean} editable - If true, slider is interactive in edit mode.
 */
function initLEDSlider(containerId, startValue, editable = true) {
  const slider = document.getElementById(containerId);
  noUiSlider.create(slider, {
    start: startValue,
    step: 1,
    range: { min: 0, max: 100 },
    orientation: 'vertical',
    direction: 'rtl',
    tooltips: true,
    animate: false
  });
  slider.style.pointerEvents = editable ? (isEditMode ? 'auto' : 'none') : 'none';
}

/**
 * Updates the LED slider value display.
 * @param {number|string} value 
 * @param {string} displayId - The ID of the element to update.
 */
function updateLEDSliderValue(value, displayId) {
  document.getElementById(displayId).textContent = value + '%';
}

/**
 * Collects slider values from a given container.
 * @param {string} containerId 
 * @returns {Array} values of sliders
 */
function collectValues(containerId) {
  const container = document.getElementById(containerId);
  const sliders = container.getElementsByClassName('slider');
  const values = [];
  for (let sliderDiv of sliders) {
    let value = sliderDiv.noUiSlider.get();
    values.push(parseInt(value));
  }
  return values;
}

```

File: js\render.js
-------------------------
```typescript
/*********************** Rendering Functions ************************/

/**
 * Renders the current scene including LED grids, sliders, spotlight notes, and music.
 */
function renderScene() {
  const currentScene = db.scenes[currentSceneIndex];

  // Ensure default LED values if missing.
  if (!currentScene.led || currentScene.led.length !== 24) {
    currentScene.led = new Array(24).fill(false);
  }
  if (typeof currentScene.ledSlider !== 'number') {
    currentScene.ledSlider = 0;
  }

  document.getElementById('sceneNumber').textContent = currentScene.sceneNumber;
  szenenameDisplay.textContent = currentScene.sceneName;
  
  // Update notes textarea value
  document.getElementById('notes').value = currentScene.notes;

  // Update image if exists
  const sceneImg = document.getElementById('sceneImg');
  sceneImg.src = currentScene.image || "";

  // Update scene name fields
  document.getElementById('currentSceneNameField').value = currentScene.sceneName;
  document.getElementById('currentSceneNameFieldRight').value = currentScene.sceneName;

  // Determine next scene
  let nextScene = db.scenes[currentSceneIndex + 1] || {
    sceneName: "Keine nÃ¤chste Szene",
    image: "",
    pultLinks: { sectionA: new Array(12).fill(0) },
    pultRechts: { sectionA: new Array(12).fill(0) },
    led: new Array(24).fill(false),
    ledSlider: 0
  };
  document.getElementById('nextSceneNameField').value = nextScene.sceneName;
  document.getElementById('nextSceneNameFieldRight').value = nextScene.sceneName;
  document.getElementById('nextSceneImg').src = nextScene.image || "";

  // Render channel sliders for current and next scenes
  createChannelSliders('links-A', currentScene.pultLinks.sectionA);
  createChannelSliders('rechts-A', currentScene.pultRechts.sectionA);
  createChannelSliders('links-B', nextScene.pultLinks.sectionA, true);
  createChannelSliders('rechts-B', nextScene.pultRechts.sectionA, true);

  renderSceneList();

  // Render LED Buttons and Sliders for current scene (Section A)
  const ledButtonsA = document.querySelectorAll('#led-buttons-SectionA .led-btn');
  ledButtonsA.forEach((btn, index) => {
    if (currentScene.led && currentScene.led[index]) {
      btn.classList.add('on');
      btn.style.backgroundColor = 'green';
    } else {
      btn.classList.remove('on');
      btn.style.backgroundColor = 'white';
    }
  });
  // Update LED slider for current scene
  const ledSliderA = document.getElementById('led-slider-A');
  if (ledSliderA && ledSliderA.noUiSlider) {
    ledSliderA.noUiSlider.set(currentScene.ledSlider);
    updateLEDSliderValue(ledSliderA.noUiSlider.get(), 'led-slider-value-A');
  }

  // Render LED Buttons and Sliders for next scene (Section B) - read-only
  const ledButtonsB = document.querySelectorAll('#led-buttons-SectionB .led-btn');
  ledButtonsB.forEach((btn, index) => {
    if (nextScene.led && nextScene.led[index]) {
      btn.classList.add('on');
      btn.style.backgroundColor = 'green';
    } else {
      btn.classList.remove('on');
      btn.style.backgroundColor = 'white';
    }
  });
  const ledSliderB = document.getElementById('led-slider-B');
  if (ledSliderB && ledSliderB.noUiSlider) {
    ledSliderB.noUiSlider.set(nextScene.ledSlider || 0);
    updateLEDSliderValue(ledSliderB.noUiSlider.get(), 'led-slider-value-B');
  }
  
  // Update spotlight (Verfolger) textarea value
  document.getElementById('verfolgerInput').value = currentScene.verfolger || '';
  
  // Load and render music for the current scene.
  if (!currentScene.musik) {
    currentScene.musik = [];
  }
  musicItems = currentScene.musik;
  renderMusicList();

  // Update body background color based on mode
  document.body.style.backgroundColor = isEditMode ? '#ffffe0' : '#ffffff';
}

/**
 * Renders the scene list on the right.
 */
function renderSceneList() {
  const szenelistDiv = document.getElementById('szenelist');
  szenelistDiv.innerHTML = "";
  db.scenes.forEach((scene, index) => {
    const item = document.createElement('div');
    item.classList.add('szenelist-item');
    if (index === currentSceneIndex) {
      item.classList.add('current');
    }
    // Combine scene number and scene name in the list item.
    item.textContent = scene.sceneNumber + ": " + scene.sceneName;
    // Switch scene on click
    item.addEventListener('click', function() {
      saveSnapshot(true);
      currentSceneIndex = index;
      renderScene();
    });
    szenelistDiv.appendChild(item);
  });
  
  // Also update LED controls for next scene (read-only) by adding a readonly class
  document.getElementById('led-sectionB').classList.add('readonly');
}


/**
 * Updates picture controls based on mode.
 */
function updatePictureControls() {
  const addPictureBtn = document.getElementById('addPictureBtn');
  addPictureBtn.style.display = isEditMode ? 'inline-block' : 'none';
}

/**
 * Renders the music list in the #musicList div.
 */
/**
 * Renders the music list in the #musicList div using an HTML audio element.
 */
/**
 * Renders the music list in the #musicList div using an HTML audio element.
 */
function renderMusicList() {
  const musicList = document.getElementById('musicList');
  musicList.innerHTML = '';
  musicItems.forEach((item, index) => {
    const container = document.createElement('div');
    container.classList.add('music-item');
    container.style.marginBottom = '5px';
    
    // Display the file name
    const fileLabel = document.createElement('span');
    fileLabel.textContent = item.fileName + ': ';
    container.appendChild(fileLabel);
    
    // Create the HTML5 audio element with controls
    const audioElem = document.createElement('audio');
    audioElem.controls = true;
    audioElem.src = item.fileUrl;
    container.appendChild(audioElem);
    
    // In edit mode, add a Delete button for each music item.
    if (isEditMode) {
      const deleteBtn = document.createElement('button');
      deleteBtn.textContent = 'Delete';
      deleteBtn.style.marginLeft = '10px';
      deleteBtn.addEventListener('click', function(e) {
        // Remove the item from the musicItems array
        musicItems.splice(index, 1);
        renderMusicList();
        // Save the snapshot so that deletion is persisted in the scene's DB entry.
        saveSnapshot(true);
        e.stopPropagation();
      });
      container.appendChild(deleteBtn);
    }
    
    musicList.appendChild(container);
  });
}


```

File: lichtplan-1.html
-------------------------
```typescript
<!DOCTYPE html>
<html lang="de">
<head>
  <meta charset="UTF-8">
  <title>Lichtplan Prototyp â€“ Production Ready mit Bildauswahl</title>
  <link rel="stylesheet" href="style.css">
  <!-- noUiSlider CSS -->
  <link rel="stylesheet" href="nouislider.min.css">
</head>
<body>
  <div id="flex-container">
    <div id="content-wrapper">
      <div id="top-wrapper">
	  <!-- Oberer Szenenbereich: Anzeige der aktuellen Szene -->
		  <div id="szene-id">
			<span class="scenenumer">Szene: <strong id="sceneNumber">1</strong></span>
			<span id="szenenameDisplay">[Szenenname]</span>
			<button id="editSzenenameBtn" style="display:none;">Edit</button>
		  </div>

		  <!-- Steuerungsbereich -->
		  <div id="controls">
			<button id="toggleMode">Wechsel zu Edit Mode</button>
			<button id="newSzene">Neue Szene einfÃ¼gen</button>
			<button id="deleteSzene">Szene lÃ¶schen</button>
		  </div>
	  </div>
	  <!-- Music Section -->
<div id="musik">
  <span>Musik</span>
  <div id="musicList"></div>
  <button id="addMusicBtn" style="display:none;">Add Music</button>
  <input type="file" id="musicFileInput" accept="audio/mp3, audio/wav, audio/ogg" style="display:none;">
</div>
	
      <div id="scenepicture">
        <div id="currentPicture">
          <img id="sceneImg" src="" alt="Aktuelles Szenenbild">
          <!-- Bild-Auswahl: nur im Edit-Mode sichtbar -->
          <button id="addPictureBtn" style="display:none;">Add Picture</button>
          <!-- Hidden File Input -->
          <input type="file" id="pictureFileInput" accept="image/jpeg" style="display:none;">
        </div>
        <div id="verfolger">
          <textarea id="verfolgerInput" placeholder="Notizen fÃ¼r Spotlight..."></textarea>
        </div>
        <div id="nextPicture">
          <img id="nextSceneImg" src="" alt="NÃ¤chstes Szenenbild">
        </div>
      </div>
	
      
      <!-- Skip-Buttons -->
      <div id="skipControls">
        <button id="prevScene">Vorherige Szene</button>
        <button id="nextScene">NÃ¤chste Szene</button>
      </div>
      
      <!-- Pult-Bereiche (links) -->
      <div id="pult-links" class="pult">
        <div id="links-sectionA">
          <h4>Aktuelle Szene â€“ <input type="text" id="currentSceneNameField" readonly></h4>
          <div id="links-A"></div>
        </div>
        <div id="links-sectionB">
          <h4>NÃ¤chste Szene â€“ <input type="text" id="nextSceneNameField" readonly></h4>
          <div id="links-B"></div>
        </div>
      </div>
      
      <!-- LED Section (Mitte) -->
      <div id="led-col">
        <!-- LED Werte fÃ¼r die Aktuelle Szene (Section A) -->
        <div id="led-sectionA">
          <div id="led-buttons-SectionA">
            <!-- LED buttons grid (4 rows x 6 columns) will be generated dynamically -->
          </div>
          <div id="led-slider-container-A">
            <!-- Vertical noUiSlider will be rendered here -->
            <div id="led-slider-A"></div>
            <span id="led-slider-value-A">0%</span>
          </div>
        </div>
        <!-- LED Werte fÃ¼r die nÃ¤chste Szene (Section B) -->
        <div id="led-sectionB">
          <div id="led-buttons-SectionB">
            <!-- LED buttons grid (4 rows x 6 columns) will be generated dynamically -->
          </div>
          <div id="led-slider-container-B">
            <!-- Vertical noUiSlider will be rendered here -->
            <div id="led-slider-B"></div>
            <span id="led-slider-value-B">0%</span>
          </div>
        </div>
      </div>
      
      <!-- Pult-Bereiche (rechts) -->
      <div id="pult-rechts" class="pult">
        <div id="rechts-sectionA">
          <h4>Aktuelle Szene â€“ <input type="text" id="currentSceneNameFieldRight" readonly></h4>
          <div id="rechts-A"></div>
        </div>
        <div id="rechts-sectionB">
          <h4>NÃ¤chste Szene â€“ <input type="text" id="nextSceneNameFieldRight" readonly></h4>
          <div id="rechts-B"></div>
        </div>
      </div>
      
      <!-- Bottom Row: Notizen and Verfolger -->
      <div id="bottom-row">
        <div class="bottom-column-left" id="notes-col">
          <textarea id="notes" placeholder="Notizen zu dieser Szene..."></textarea>
        </div>
        <div class="bottom-column-right" id="verfolger-col">
          <textarea id="verfolgerInput" placeholder="Notizen fÃ¼r Spotlight..."></textarea>
        </div>
      </div>
      
      <!-- Snapshot Controls -->
      <div id="snapshotControls">
        <button id="saveSnapshot">Manuel speichern</button>
        <button id="loadSnapshot"></button>
      </div>
      
      <!-- Export/Import Controls -->
      <div id="fileControls">
        <button id="exportBtn">Daten exportieren</button>
        <input type="file" id="importFile" accept="application/json" style="display:none;">
        <button id="importBtn">Daten importieren</button>
      </div>
    </div> <!-- end #content-wrapper -->

    <div id="szenelist"></div>
  </div> <!-- end #flex-container -->

  <!-- noUiSlider JS -->
  <script src="nouislider.min.js"></script>
  <!-- JavaScript Modules -->
  <script src="js/globals.js"></script>
  <script src="js/helpers.js"></script>
  <script src="js/render.js"></script>
  <script src="js/events.js"></script>
</body>
</html>

```

File: nouislider.min.js
-------------------------
```typescript
!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?e(exports):"function"==typeof define&&define.amd?define(["exports"],e):e((t="undefined"!=typeof globalThis?globalThis:t||self).noUiSlider={})}(this,function(ot){"use strict";function n(t){return"object"==typeof t&&"function"==typeof t.to}function st(t){t.parentElement.removeChild(t)}function at(t){return null!=t}function lt(t){t.preventDefault()}function i(t){return"number"==typeof t&&!isNaN(t)&&isFinite(t)}function ut(t,e,r){0<r&&(ft(t,e),setTimeout(function(){dt(t,e)},r))}function ct(t){return Math.max(Math.min(t,100),0)}function pt(t){return Array.isArray(t)?t:[t]}function e(t){t=(t=String(t)).split(".");return 1<t.length?t[1].length:0}function ft(t,e){t.classList&&!/\s/.test(e)?t.classList.add(e):t.className+=" "+e}function dt(t,e){t.classList&&!/\s/.test(e)?t.classList.remove(e):t.className=t.className.replace(new RegExp("(^|\\b)"+e.split(" ").join("|")+"(\\b|$)","gi")," ")}function ht(t){var e=void 0!==window.pageXOffset,r="CSS1Compat"===(t.compatMode||"");return{x:e?window.pageXOffset:(r?t.documentElement:t.body).scrollLeft,y:e?window.pageYOffset:(r?t.documentElement:t.body).scrollTop}}function s(t,e){return 100/(e-t)}function a(t,e,r){return 100*e/(t[r+1]-t[r])}function l(t,e){for(var r=1;t>=e[r];)r+=1;return r}function r(t,e,r){if(r>=t.slice(-1)[0])return 100;var n=l(r,t),i=t[n-1],o=t[n],t=e[n-1],n=e[n];return t+(r=r,a(o=[i,o],o[0]<0?r+Math.abs(o[0]):r-o[0],0)/s(t,n))}function o(t,e,r,n){if(100===n)return n;var i=l(n,t),o=t[i-1],s=t[i];return r?(s-o)/2<n-o?s:o:e[i-1]?t[i-1]+(t=n-t[i-1],i=e[i-1],Math.round(t/i)*i):n}ot.PipsMode=void 0,(H=ot.PipsMode||(ot.PipsMode={})).Range="range",H.Steps="steps",H.Positions="positions",H.Count="count",H.Values="values",ot.PipsType=void 0,(H=ot.PipsType||(ot.PipsType={}))[H.None=-1]="None",H[H.NoValue=0]="NoValue",H[H.LargeValue=1]="LargeValue",H[H.SmallValue=2]="SmallValue";var u=(t.prototype.getDistance=function(t){for(var e=[],r=0;r<this.xNumSteps.length-1;r++)e[r]=a(this.xVal,t,r);return e},t.prototype.getAbsoluteDistance=function(t,e,r){var n=0;if(t<this.xPct[this.xPct.length-1])for(;t>this.xPct[n+1];)n++;else t===this.xPct[this.xPct.length-1]&&(n=this.xPct.length-2);r||t!==this.xPct[n+1]||n++;for(var i,o=1,s=(e=null===e?[]:e)[n],a=0,l=0,u=0,c=r?(t-this.xPct[n])/(this.xPct[n+1]-this.xPct[n]):(this.xPct[n+1]-t)/(this.xPct[n+1]-this.xPct[n]);0<s;)i=this.xPct[n+1+u]-this.xPct[n+u],100<e[n+u]*o+100-100*c?(a=i*c,o=(s-100*c)/e[n+u],c=1):(a=e[n+u]*i/100*o,o=0),r?(l-=a,1<=this.xPct.length+u&&u--):(l+=a,1<=this.xPct.length-u&&u++),s=e[n+u]*o;return t+l},t.prototype.toStepping=function(t){return t=r(this.xVal,this.xPct,t)},t.prototype.fromStepping=function(t){return function(t,e,r){if(100<=r)return t.slice(-1)[0];var n=l(r,e),i=t[n-1],o=t[n],t=e[n-1],n=e[n];return(r-t)*s(t,n)*((o=[i,o])[1]-o[0])/100+o[0]}(this.xVal,this.xPct,t)},t.prototype.getStep=function(t){return t=o(this.xPct,this.xSteps,this.snap,t)},t.prototype.getDefaultStep=function(t,e,r){var n=l(t,this.xPct);return(100===t||e&&t===this.xPct[n-1])&&(n=Math.max(n-1,1)),(this.xVal[n]-this.xVal[n-1])/r},t.prototype.getNearbySteps=function(t){t=l(t,this.xPct);return{stepBefore:{startValue:this.xVal[t-2],step:this.xNumSteps[t-2],highestStep:this.xHighestCompleteStep[t-2]},thisStep:{startValue:this.xVal[t-1],step:this.xNumSteps[t-1],highestStep:this.xHighestCompleteStep[t-1]},stepAfter:{startValue:this.xVal[t],step:this.xNumSteps[t],highestStep:this.xHighestCompleteStep[t]}}},t.prototype.countStepDecimals=function(){var t=this.xNumSteps.map(e);return Math.max.apply(null,t)},t.prototype.hasNoSize=function(){return this.xVal[0]===this.xVal[this.xVal.length-1]},t.prototype.convert=function(t){return this.getStep(this.toStepping(t))},t.prototype.handleEntryPoint=function(t,e){t="min"===t?0:"max"===t?100:parseFloat(t);if(!i(t)||!i(e[0]))throw new Error("noUiSlider: 'range' value isn't numeric.");this.xPct.push(t),this.xVal.push(e[0]);e=Number(e[1]);t?this.xSteps.push(!isNaN(e)&&e):isNaN(e)||(this.xSteps[0]=e),this.xHighestCompleteStep.push(0)},t.prototype.handleStepPoint=function(t,e){e&&(this.xVal[t]!==this.xVal[t+1]?(this.xSteps[t]=a([this.xVal[t],this.xVal[t+1]],e,0)/s(this.xPct[t],this.xPct[t+1]),e=(this.xVal[t+1]-this.xVal[t])/this.xNumSteps[t],e=Math.ceil(Number(e.toFixed(3))-1),e=this.xVal[t]+this.xNumSteps[t]*e,this.xHighestCompleteStep[t]=e):this.xSteps[t]=this.xHighestCompleteStep[t]=this.xVal[t])},t);function t(e,t,r){var n;this.xPct=[],this.xVal=[],this.xSteps=[],this.xNumSteps=[],this.xHighestCompleteStep=[],this.xSteps=[r||!1],this.xNumSteps=[!1],this.snap=t;var i=[];for(Object.keys(e).forEach(function(t){i.push([pt(e[t]),t])}),i.sort(function(t,e){return t[0][0]-e[0][0]}),n=0;n<i.length;n++)this.handleEntryPoint(i[n][1],i[n][0]);for(this.xNumSteps=this.xSteps.slice(0),n=0;n<this.xNumSteps.length;n++)this.handleStepPoint(n,this.xNumSteps[n])}var c={to:function(t){return void 0===t?"":t.toFixed(2)},from:Number},p={target:"target",base:"base",origin:"origin",handle:"handle",handleLower:"handle-lower",handleUpper:"handle-upper",touchArea:"touch-area",horizontal:"horizontal",vertical:"vertical",background:"background",connect:"connect",connects:"connects",ltr:"ltr",rtl:"rtl",textDirectionLtr:"txt-dir-ltr",textDirectionRtl:"txt-dir-rtl",draggable:"draggable",drag:"state-drag",tap:"state-tap",active:"active",tooltip:"tooltip",pips:"pips",pipsHorizontal:"pips-horizontal",pipsVertical:"pips-vertical",marker:"marker",markerHorizontal:"marker-horizontal",markerVertical:"marker-vertical",markerNormal:"marker-normal",markerLarge:"marker-large",markerSub:"marker-sub",value:"value",valueHorizontal:"value-horizontal",valueVertical:"value-vertical",valueNormal:"value-normal",valueLarge:"value-large",valueSub:"value-sub"},mt={tooltips:".__tooltips",aria:".__aria"};function f(t,e){if(!i(e))throw new Error("noUiSlider: 'step' is not numeric.");t.singleStep=e}function d(t,e){if(!i(e))throw new Error("noUiSlider: 'keyboardPageMultiplier' is not numeric.");t.keyboardPageMultiplier=e}function h(t,e){if(!i(e))throw new Error("noUiSlider: 'keyboardMultiplier' is not numeric.");t.keyboardMultiplier=e}function m(t,e){if(!i(e))throw new Error("noUiSlider: 'keyboardDefaultStep' is not numeric.");t.keyboardDefaultStep=e}function g(t,e){if("object"!=typeof e||Array.isArray(e))throw new Error("noUiSlider: 'range' is not an object.");if(void 0===e.min||void 0===e.max)throw new Error("noUiSlider: Missing 'min' or 'max' in 'range'.");t.spectrum=new u(e,t.snap||!1,t.singleStep)}function v(t,e){if(e=pt(e),!Array.isArray(e)||!e.length)throw new Error("noUiSlider: 'start' option is incorrect.");t.handles=e.length,t.start=e}function b(t,e){if("boolean"!=typeof e)throw new Error("noUiSlider: 'snap' option must be a boolean.");t.snap=e}function S(t,e){if("boolean"!=typeof e)throw new Error("noUiSlider: 'animate' option must be a boolean.");t.animate=e}function x(t,e){if("number"!=typeof e)throw new Error("noUiSlider: 'animationDuration' option must be a number.");t.animationDuration=e}function y(t,e){var r,n=[!1];if("lower"===e?e=[!0,!1]:"upper"===e&&(e=[!1,!0]),!0===e||!1===e){for(r=1;r<t.handles;r++)n.push(e);n.push(!1)}else{if(!Array.isArray(e)||!e.length||e.length!==t.handles+1)throw new Error("noUiSlider: 'connect' option doesn't match handle count.");n=e}t.connect=n}function w(t,e){switch(e){case"horizontal":t.ort=0;break;case"vertical":t.ort=1;break;default:throw new Error("noUiSlider: 'orientation' option is invalid.")}}function E(t,e){if(!i(e))throw new Error("noUiSlider: 'margin' option must be numeric.");0!==e&&(t.margin=t.spectrum.getDistance(e))}function P(t,e){if(!i(e))throw new Error("noUiSlider: 'limit' option must be numeric.");if(t.limit=t.spectrum.getDistance(e),!t.limit||t.handles<2)throw new Error("noUiSlider: 'limit' option is only supported on linear sliders with 2 or more handles.")}function C(t,e){var r;if(!i(e)&&!Array.isArray(e))throw new Error("noUiSlider: 'padding' option must be numeric or array of exactly 2 numbers.");if(Array.isArray(e)&&2!==e.length&&!i(e[0])&&!i(e[1]))throw new Error("noUiSlider: 'padding' option must be numeric or array of exactly 2 numbers.");if(0!==e){for(Array.isArray(e)||(e=[e,e]),t.padding=[t.spectrum.getDistance(e[0]),t.spectrum.getDistance(e[1])],r=0;r<t.spectrum.xNumSteps.length-1;r++)if(t.padding[0][r]<0||t.padding[1][r]<0)throw new Error("noUiSlider: 'padding' option must be a positive number(s).");var n=e[0]+e[1],e=t.spectrum.xVal[0];if(1<n/(t.spectrum.xVal[t.spectrum.xVal.length-1]-e))throw new Error("noUiSlider: 'padding' option must not exceed 100% of the range.")}}function N(t,e){switch(e){case"ltr":t.dir=0;break;case"rtl":t.dir=1;break;default:throw new Error("noUiSlider: 'direction' option was not recognized.")}}function V(t,e){if("string"!=typeof e)throw new Error("noUiSlider: 'behaviour' must be a string containing options.");var r=0<=e.indexOf("tap"),n=0<=e.indexOf("drag"),i=0<=e.indexOf("fixed"),o=0<=e.indexOf("snap"),s=0<=e.indexOf("hover"),a=0<=e.indexOf("unconstrained"),l=0<=e.indexOf("drag-all"),e=0<=e.indexOf("smooth-steps");if(i){if(2!==t.handles)throw new Error("noUiSlider: 'fixed' behaviour must be used with 2 handles");E(t,t.start[1]-t.start[0])}if(a&&(t.margin||t.limit))throw new Error("noUiSlider: 'unconstrained' behaviour cannot be used with margin or limit");t.events={tap:r||o,drag:n,dragAll:l,smoothSteps:e,fixed:i,snap:o,hover:s,unconstrained:a}}function k(t,e){if(!1!==e)if(!0===e||n(e)){t.tooltips=[];for(var r=0;r<t.handles;r++)t.tooltips.push(e)}else{if((e=pt(e)).length!==t.handles)throw new Error("noUiSlider: must pass a formatter for all handles.");e.forEach(function(t){if("boolean"!=typeof t&&!n(t))throw new Error("noUiSlider: 'tooltips' must be passed a formatter or 'false'.")}),t.tooltips=e}}function M(t,e){if(e.length!==t.handles)throw new Error("noUiSlider: must pass a attributes for all handles.");t.handleAttributes=e}function A(t,e){if(!n(e))throw new Error("noUiSlider: 'ariaFormat' requires 'to' method.");t.ariaFormat=e}function U(t,e){if(!n(r=e)||"function"!=typeof r.from)throw new Error("noUiSlider: 'format' requires 'to' and 'from' methods.");var r;t.format=e}function D(t,e){if("boolean"!=typeof e)throw new Error("noUiSlider: 'keyboardSupport' option must be a boolean.");t.keyboardSupport=e}function O(t,e){t.documentElement=e}function L(t,e){if("string"!=typeof e&&!1!==e)throw new Error("noUiSlider: 'cssPrefix' must be a string or `false`.");t.cssPrefix=e}function T(e,r){if("object"!=typeof r)throw new Error("noUiSlider: 'cssClasses' must be an object.");"string"==typeof e.cssPrefix?(e.cssClasses={},Object.keys(r).forEach(function(t){e.cssClasses[t]=e.cssPrefix+r[t]})):e.cssClasses=r}function gt(e){var r={margin:null,limit:null,padding:null,animate:!0,animationDuration:300,ariaFormat:c,format:c},n={step:{r:!1,t:f},keyboardPageMultiplier:{r:!1,t:d},keyboardMultiplier:{r:!1,t:h},keyboardDefaultStep:{r:!1,t:m},start:{r:!0,t:v},connect:{r:!0,t:y},direction:{r:!0,t:N},snap:{r:!1,t:b},animate:{r:!1,t:S},animationDuration:{r:!1,t:x},range:{r:!0,t:g},orientation:{r:!1,t:w},margin:{r:!1,t:E},limit:{r:!1,t:P},padding:{r:!1,t:C},behaviour:{r:!0,t:V},ariaFormat:{r:!1,t:A},format:{r:!1,t:U},tooltips:{r:!1,t:k},keyboardSupport:{r:!0,t:D},documentElement:{r:!1,t:O},cssPrefix:{r:!0,t:L},cssClasses:{r:!0,t:T},handleAttributes:{r:!1,t:M}},i={connect:!1,direction:"ltr",behaviour:"tap",orientation:"horizontal",keyboardSupport:!0,cssPrefix:"noUi-",cssClasses:p,keyboardPageMultiplier:5,keyboardMultiplier:1,keyboardDefaultStep:10};e.format&&!e.ariaFormat&&(e.ariaFormat=e.format),Object.keys(n).forEach(function(t){if(at(e[t])||void 0!==i[t])n[t].t(r,(at(e[t])?e:i)[t]);else if(n[t].r)throw new Error("noUiSlider: '"+t+"' is required.")}),r.pips=e.pips;var t=document.createElement("div"),o=void 0!==t.style.msTransform,t=void 0!==t.style.transform;r.transformRule=t?"transform":o?"msTransform":"webkitTransform";return r.style=[["left","top"],["right","bottom"]][r.dir][r.ort],r}function j(t,f,o){var i,l,a,n,s,u,c=window.navigator.pointerEnabled?{start:"pointerdown",move:"pointermove",end:"pointerup"}:window.navigator.msPointerEnabled?{start:"MSPointerDown",move:"MSPointerMove",end:"MSPointerUp"}:{start:"mousedown touchstart",move:"mousemove touchmove",end:"mouseup touchend"},p=window.CSS&&CSS.supports&&CSS.supports("touch-action","none")&&function(){var t=!1;try{var e=Object.defineProperty({},"passive",{get:function(){t=!0}});window.addEventListener("test",null,e)}catch(t){}return t}(),d=t,S=f.spectrum,h=[],m=[],g=[],v=0,b={},x=t.ownerDocument,y=f.documentElement||x.documentElement,w=x.body,E="rtl"===x.dir||1===f.ort?0:100;function P(t,e){var r=x.createElement("div");return e&&ft(r,e),t.appendChild(r),r}function C(t,e){var r,t=P(t,f.cssClasses.origin),n=P(t,f.cssClasses.handle);return P(n,f.cssClasses.touchArea),n.setAttribute("data-handle",String(e)),f.keyboardSupport&&(n.setAttribute("tabindex","0"),n.addEventListener("keydown",function(t){return function(t,e){if(V()||k(e))return!1;var r=["Left","Right"],n=["Down","Up"],i=["PageDown","PageUp"],o=["Home","End"];f.dir&&!f.ort?r.reverse():f.ort&&!f.dir&&(n.reverse(),i.reverse());var s=t.key.replace("Arrow",""),a=s===i[0],l=s===i[1],i=s===n[0]||s===r[0]||a,n=s===n[1]||s===r[1]||l,r=s===o[0],o=s===o[1];if(!(i||n||r||o))return!0;if(t.preventDefault(),n||i){var u=i?0:1,u=nt(e)[u];if(null===u)return!1;!1===u&&(u=S.getDefaultStep(m[e],i,f.keyboardDefaultStep)),u*=l||a?f.keyboardPageMultiplier:f.keyboardMultiplier,u=Math.max(u,1e-7),u*=i?-1:1,u=h[e]+u}else u=o?f.spectrum.xVal[f.spectrum.xVal.length-1]:f.spectrum.xVal[0];return Q(e,S.toStepping(u),!0,!0),I("slide",e),I("update",e),I("change",e),I("set",e),!1}(t,e)})),void 0!==f.handleAttributes&&(r=f.handleAttributes[e],Object.keys(r).forEach(function(t){n.setAttribute(t,r[t])})),n.setAttribute("role","slider"),n.setAttribute("aria-orientation",f.ort?"vertical":"horizontal"),0===e?ft(n,f.cssClasses.handleLower):e===f.handles-1&&ft(n,f.cssClasses.handleUpper),t}function N(t,e){return!!e&&P(t,f.cssClasses.connect)}function e(t,e){return!(!f.tooltips||!f.tooltips[e])&&P(t.firstChild,f.cssClasses.tooltip)}function V(){return d.hasAttribute("disabled")}function k(t){return l[t].hasAttribute("disabled")}function M(){s&&(Y("update"+mt.tooltips),s.forEach(function(t){t&&st(t)}),s=null)}function A(){M(),s=l.map(e),X("update"+mt.tooltips,function(t,e,r){s&&f.tooltips&&!1!==s[e]&&(t=t[e],!0!==f.tooltips[e]&&(t=f.tooltips[e].to(r[e])),s[e].innerHTML=t)})}function U(t,e){return t.map(function(t){return S.fromStepping(e?S.getStep(t):t)})}function D(d){var h=function(t){if(t.mode===ot.PipsMode.Range||t.mode===ot.PipsMode.Steps)return S.xVal;if(t.mode!==ot.PipsMode.Count)return t.mode===ot.PipsMode.Positions?U(t.values,t.stepped):t.mode===ot.PipsMode.Values?t.stepped?t.values.map(function(t){return S.fromStepping(S.getStep(S.toStepping(t)))}):t.values:[];if(t.values<2)throw new Error("noUiSlider: 'values' (>= 2) required for mode 'count'.");for(var e=t.values-1,r=100/e,n=[];e--;)n[e]=e*r;return n.push(100),U(n,t.stepped)}(d),m={},t=S.xVal[0],e=S.xVal[S.xVal.length-1],g=!1,v=!1,b=0;return(h=h.slice().sort(function(t,e){return t-e}).filter(function(t){return!this[t]&&(this[t]=!0)},{}))[0]!==t&&(h.unshift(t),g=!0),h[h.length-1]!==e&&(h.push(e),v=!0),h.forEach(function(t,e){var r,n,i,o,s,a,l,u,t=t,c=h[e+1],p=d.mode===ot.PipsMode.Steps,f=(f=p?S.xNumSteps[e]:f)||c-t;for(void 0===c&&(c=t),f=Math.max(f,1e-7),r=t;r<=c;r=Number((r+f).toFixed(7))){for(a=(o=(i=S.toStepping(r))-b)/(d.density||1),u=o/(l=Math.round(a)),n=1;n<=l;n+=1)m[(s=b+n*u).toFixed(5)]=[S.fromStepping(s),0];a=-1<h.indexOf(r)?ot.PipsType.LargeValue:p?ot.PipsType.SmallValue:ot.PipsType.NoValue,!e&&g&&r!==c&&(a=0),r===c&&v||(m[i.toFixed(5)]=[r,a]),b=i}}),m}function O(i,o,s){var t,a=x.createElement("div"),n=((t={})[ot.PipsType.None]="",t[ot.PipsType.NoValue]=f.cssClasses.valueNormal,t[ot.PipsType.LargeValue]=f.cssClasses.valueLarge,t[ot.PipsType.SmallValue]=f.cssClasses.valueSub,t),l=((t={})[ot.PipsType.None]="",t[ot.PipsType.NoValue]=f.cssClasses.markerNormal,t[ot.PipsType.LargeValue]=f.cssClasses.markerLarge,t[ot.PipsType.SmallValue]=f.cssClasses.markerSub,t),u=[f.cssClasses.valueHorizontal,f.cssClasses.valueVertical],c=[f.cssClasses.markerHorizontal,f.cssClasses.markerVertical];function p(t,e){var r=e===f.cssClasses.value;return e+" "+(r?u:c)[f.ort]+" "+(r?n:l)[t]}return ft(a,f.cssClasses.pips),ft(a,0===f.ort?f.cssClasses.pipsHorizontal:f.cssClasses.pipsVertical),Object.keys(i).forEach(function(t){var e,r,n;r=i[e=t][0],n=i[t][1],(n=o?o(r,n):n)!==ot.PipsType.None&&((t=P(a,!1)).className=p(n,f.cssClasses.marker),t.style[f.style]=e+"%",n>ot.PipsType.NoValue&&((t=P(a,!1)).className=p(n,f.cssClasses.value),t.setAttribute("data-value",String(r)),t.style[f.style]=e+"%",t.innerHTML=String(s.to(r))))}),a}function L(){n&&(st(n),n=null)}function T(t){L();var e=D(t),r=t.filter,t=t.format||{to:function(t){return String(Math.round(t))}};return n=d.appendChild(O(e,r,t))}function j(){var t=i.getBoundingClientRect(),e="offset"+["Width","Height"][f.ort];return 0===f.ort?t.width||i[e]:t.height||i[e]}function z(n,i,o,s){function e(t){var e,r=function(e,t,r){var n=0===e.type.indexOf("touch"),i=0===e.type.indexOf("mouse"),o=0===e.type.indexOf("pointer"),s=0,a=0;0===e.type.indexOf("MSPointer")&&(o=!0);if("mousedown"===e.type&&!e.buttons&&!e.touches)return!1;if(n){var l=function(t){t=t.target;return t===r||r.contains(t)||e.composed&&e.composedPath().shift()===r};if("touchstart"===e.type){n=Array.prototype.filter.call(e.touches,l);if(1<n.length)return!1;s=n[0].pageX,a=n[0].pageY}else{l=Array.prototype.find.call(e.changedTouches,l);if(!l)return!1;s=l.pageX,a=l.pageY}}t=t||ht(x),(i||o)&&(s=e.clientX+t.x,a=e.clientY+t.y);return e.pageOffset=t,e.points=[s,a],e.cursor=i||o,e}(t,s.pageOffset,s.target||i);return!!r&&(!(V()&&!s.doNotReject)&&(e=d,t=f.cssClasses.tap,!((e.classList?e.classList.contains(t):new RegExp("\\b"+t+"\\b").test(e.className))&&!s.doNotReject)&&(!(n===c.start&&void 0!==r.buttons&&1<r.buttons)&&((!s.hover||!r.buttons)&&(p||r.preventDefault(),r.calcPoint=r.points[f.ort],void o(r,s))))))}var r=[];return n.split(" ").forEach(function(t){i.addEventListener(t,e,!!p&&{passive:!0}),r.push([t,e])}),r}function H(t){var e,r,n=ct(n=100*(t-(n=i,e=f.ort,r=n.getBoundingClientRect(),n=(t=n.ownerDocument).documentElement,t=ht(t),/webkit.*Chrome.*Mobile/i.test(navigator.userAgent)&&(t.x=0),e?r.top+t.y-n.clientTop:r.left+t.x-n.clientLeft))/j());return f.dir?100-n:n}function F(t,e){"mouseout"===t.type&&"HTML"===t.target.nodeName&&null===t.relatedTarget&&_(t,e)}function R(t,e){if(-1===navigator.appVersion.indexOf("MSIE 9")&&0===t.buttons&&0!==e.buttonsProperty)return _(t,e);t=(f.dir?-1:1)*(t.calcPoint-e.startCalcPoint);G(0<t,100*t/e.baseSize,e.locations,e.handleNumbers,e.connect)}function _(t,e){e.handle&&(dt(e.handle,f.cssClasses.active),--v),e.listeners.forEach(function(t){y.removeEventListener(t[0],t[1])}),0===v&&(dt(d,f.cssClasses.drag),K(),t.cursor&&(w.style.cursor="",w.removeEventListener("selectstart",lt))),f.events.smoothSteps&&(e.handleNumbers.forEach(function(t){Q(t,m[t],!0,!0,!1,!1)}),e.handleNumbers.forEach(function(t){I("update",t)})),e.handleNumbers.forEach(function(t){I("change",t),I("set",t),I("end",t)})}function B(t,e){var r,n,i,o;e.handleNumbers.some(k)||(1===e.handleNumbers.length&&(o=l[e.handleNumbers[0]].children[0],v+=1,ft(o,f.cssClasses.active)),t.stopPropagation(),n=z(c.move,y,R,{target:t.target,handle:o,connect:e.connect,listeners:r=[],startCalcPoint:t.calcPoint,baseSize:j(),pageOffset:t.pageOffset,handleNumbers:e.handleNumbers,buttonsProperty:t.buttons,locations:m.slice()}),i=z(c.end,y,_,{target:t.target,handle:o,listeners:r,doNotReject:!0,handleNumbers:e.handleNumbers}),o=z("mouseout",y,F,{target:t.target,handle:o,listeners:r,doNotReject:!0,handleNumbers:e.handleNumbers}),r.push.apply(r,n.concat(i,o)),t.cursor&&(w.style.cursor=getComputedStyle(t.target).cursor,1<l.length&&ft(d,f.cssClasses.drag),w.addEventListener("selectstart",lt,!1)),e.handleNumbers.forEach(function(t){I("start",t)}))}function r(t){t.stopPropagation();var i,o,s,e=H(t.calcPoint),r=(i=e,s=!(o=100),l.forEach(function(t,e){var r,n;k(e)||(r=m[e],((n=Math.abs(r-i))<o||n<=o&&r<i||100===n&&100===o)&&(s=e,o=n))}),s);!1!==r&&(f.events.snap||ut(d,f.cssClasses.tap,f.animationDuration),Q(r,e,!0,!0),K(),I("slide",r,!0),I("update",r,!0),f.events.snap?B(t,{handleNumbers:[r]}):(I("change",r,!0),I("set",r,!0)))}function q(t){var t=H(t.calcPoint),t=S.getStep(t),e=S.fromStepping(t);Object.keys(b).forEach(function(t){"hover"===t.split(".")[0]&&b[t].forEach(function(t){t.call(it,e)})})}function X(t,e){b[t]=b[t]||[],b[t].push(e),"update"===t.split(".")[0]&&l.forEach(function(t,e){I("update",e)})}function Y(t){var n=t&&t.split(".")[0],i=n?t.substring(n.length):t;Object.keys(b).forEach(function(t){var e=t.split(".")[0],r=t.substring(e.length);n&&n!==e||i&&i!==r||((e=r)!==mt.aria&&e!==mt.tooltips||i===r)&&delete b[t]})}function I(r,n,i){Object.keys(b).forEach(function(t){var e=t.split(".")[0];r===e&&b[t].forEach(function(t){t.call(it,h.map(f.format.to),n,h.slice(),i||!1,m.slice(),it)})})}function W(t,e,r,n,i,o,s){var a;return 1<l.length&&!f.events.unconstrained&&(n&&0<e&&(a=S.getAbsoluteDistance(t[e-1],f.margin,!1),r=Math.max(r,a)),i&&e<l.length-1&&(a=S.getAbsoluteDistance(t[e+1],f.margin,!0),r=Math.min(r,a))),1<l.length&&f.limit&&(n&&0<e&&(a=S.getAbsoluteDistance(t[e-1],f.limit,!1),r=Math.min(r,a)),i&&e<l.length-1&&(a=S.getAbsoluteDistance(t[e+1],f.limit,!0),r=Math.max(r,a))),f.padding&&(0===e&&(a=S.getAbsoluteDistance(0,f.padding[0],!1),r=Math.max(r,a)),e===l.length-1&&(a=S.getAbsoluteDistance(100,f.padding[1],!0),r=Math.min(r,a))),!((r=ct(r=!s?S.getStep(r):r))===t[e]&&!o)&&r}function $(t,e){var r=f.ort;return(r?e:t)+", "+(r?t:e)}function G(t,r,n,e,i){var o=n.slice(),s=e[0],a=f.events.smoothSteps,l=[!t,t],u=[t,!t];e=e.slice(),t&&e.reverse(),1<e.length?e.forEach(function(t,e){e=W(o,t,o[t]+r,l[e],u[e],!1,a);!1===e?r=0:(r=e-o[t],o[t]=e)}):l=u=[!0];var c=!1;e.forEach(function(t,e){c=Q(t,n[t]+r,l[e],u[e],!1,a)||c}),c&&(e.forEach(function(t){I("update",t),I("slide",t)}),null!=i&&I("drag",s))}function J(t,e){return f.dir?100-t-e:t}function K(){g.forEach(function(t){var e=50<m[t]?-1:1,e=3+(l.length+e*t);l[t].style.zIndex=String(e)})}function Q(t,e,r,n,i,o){return!1!==(e=i?e:W(m,t,e,r,n,!1,o))&&(e=e,m[t=t]=e,h[t]=S.fromStepping(e),e="translate("+$(J(e,0)-E+"%","0")+")",l[t].style[f.transformRule]=e,Z(t),Z(t+1),!0)}function Z(t){var e,r;a[t]&&(r=100,e="translate("+$(J(e=(e=0)!==t?m[t-1]:e,r=(r=t!==a.length-1?m[t]:r)-e)+"%","0")+")",r="scale("+$(r/100,"1")+")",a[t].style[f.transformRule]=e+" "+r)}function tt(t,e){return null===t||!1===t||void 0===t?m[e]:("number"==typeof t&&(t=String(t)),!1===(t=!1!==(t=f.format.from(t))?S.toStepping(t):t)||isNaN(t)?m[e]:t)}function et(t,e,r){var n=pt(t),t=void 0===m[0];e=void 0===e||e,f.animate&&!t&&ut(d,f.cssClasses.tap,f.animationDuration),g.forEach(function(t){Q(t,tt(n[t],t),!0,!1,r)});var i,o=1===g.length?0:1;for(t&&S.hasNoSize()&&(r=!0,m[0]=0,1<g.length&&(i=100/(g.length-1),g.forEach(function(t){m[t]=t*i})));o<g.length;++o)g.forEach(function(t){Q(t,m[t],!0,!0,r)});K(),g.forEach(function(t){I("update",t),null!==n[t]&&e&&I("set",t)})}function rt(t){if(t=void 0===t?!1:t)return 1===h.length?h[0]:h.slice(0);t=h.map(f.format.to);return 1===t.length?t[0]:t}function nt(t){var e=m[t],r=S.getNearbySteps(e),n=h[t],i=r.thisStep.step,t=null;if(f.snap)return[n-r.stepBefore.startValue||null,r.stepAfter.startValue-n||null];!1!==i&&n+i>r.stepAfter.startValue&&(i=r.stepAfter.startValue-n),t=n>r.thisStep.startValue?r.thisStep.step:!1!==r.stepBefore.step&&n-r.stepBefore.highestStep,100===e?i=null:0===e&&(t=null);e=S.countStepDecimals();return null!==i&&!1!==i&&(i=Number(i.toFixed(e))),[t=null!==t&&!1!==t?Number(t.toFixed(e)):t,i]}ft(t=d,f.cssClasses.target),0===f.dir?ft(t,f.cssClasses.ltr):ft(t,f.cssClasses.rtl),0===f.ort?ft(t,f.cssClasses.horizontal):ft(t,f.cssClasses.vertical),ft(t,"rtl"===getComputedStyle(t).direction?f.cssClasses.textDirectionRtl:f.cssClasses.textDirectionLtr),i=P(t,f.cssClasses.base),function(t,e){var r=P(e,f.cssClasses.connects);l=[],(a=[]).push(N(r,t[0]));for(var n=0;n<f.handles;n++)l.push(C(e,n)),g[n]=n,a.push(N(r,t[n+1]))}(f.connect,i),(u=f.events).fixed||l.forEach(function(t,e){z(c.start,t.children[0],B,{handleNumbers:[e]})}),u.tap&&z(c.start,i,r,{}),u.hover&&z(c.move,i,q,{hover:!0}),u.drag&&a.forEach(function(e,t){var r,n,i,o,s;!1!==e&&0!==t&&t!==a.length-1&&(r=l[t-1],n=l[t],i=[e],o=[r,n],s=[t-1,t],ft(e,f.cssClasses.draggable),u.fixed&&(i.push(r.children[0]),i.push(n.children[0])),u.dragAll&&(o=l,s=g),i.forEach(function(t){z(c.start,t,B,{handles:o,handleNumbers:s,connect:e})}))}),et(f.start),f.pips&&T(f.pips),f.tooltips&&A(),Y("update"+mt.aria),X("update"+mt.aria,function(t,e,o,r,s){g.forEach(function(t){var e=l[t],r=W(m,t,0,!0,!0,!0),n=W(m,t,100,!0,!0,!0),i=s[t],t=String(f.ariaFormat.to(o[t])),r=S.fromStepping(r).toFixed(1),n=S.fromStepping(n).toFixed(1),i=S.fromStepping(i).toFixed(1);e.children[0].setAttribute("aria-valuemin",r),e.children[0].setAttribute("aria-valuemax",n),e.children[0].setAttribute("aria-valuenow",i),e.children[0].setAttribute("aria-valuetext",t)})});var it={destroy:function(){for(Y(mt.aria),Y(mt.tooltips),Object.keys(f.cssClasses).forEach(function(t){dt(d,f.cssClasses[t])});d.firstChild;)d.removeChild(d.firstChild);delete d.noUiSlider},steps:function(){return g.map(nt)},on:X,off:Y,get:rt,set:et,setHandle:function(t,e,r,n){if(!(0<=(t=Number(t))&&t<g.length))throw new Error("noUiSlider: invalid handle number, got: "+t);Q(t,tt(e,t),!0,!0,n),I("update",t),r&&I("set",t)},reset:function(t){et(f.start,t)},__moveHandles:function(t,e,r){G(t,e,m,r)},options:o,updateOptions:function(e,t){var r=rt(),n=["margin","limit","padding","range","animate","snap","step","format","pips","tooltips"];n.forEach(function(t){void 0!==e[t]&&(o[t]=e[t])});var i=gt(o);n.forEach(function(t){void 0!==e[t]&&(f[t]=i[t])}),S=i.spectrum,f.margin=i.margin,f.limit=i.limit,f.padding=i.padding,f.pips?T(f.pips):L(),(f.tooltips?A:M)(),m=[],et(at(e.start)?e.start:r,t)},target:d,removePips:L,removeTooltips:M,getPositions:function(){return m.slice()},getTooltips:function(){return s},getOrigins:function(){return l},pips:T};return it}function z(t,e){if(!t||!t.nodeName)throw new Error("noUiSlider: create requires a single element, got: "+t);if(t.noUiSlider)throw new Error("noUiSlider: Slider was already initialized.");e=j(t,gt(e),e);return t.noUiSlider=e}var H={__spectrum:u,cssClasses:p,create:z};ot.create=z,ot.cssClasses=p,ot.default=H,Object.defineProperty(ot,"__esModule",{value:!0})});
```

